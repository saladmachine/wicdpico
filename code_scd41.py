# SPDX-FileCopyrightText: 2025
# SPDX-License-Identifier: MIT

"""
Single-page WicdPico app showing SCD41 readings card and LED card,
with a SCD41 Details button that opens a second page with only a Return button.
All buttons are centered, blue, and stacked vertically for both cards.
LED card is generated by the LED module, preserving its working functionality.
"""

import gc
import time
import wifi
import supervisor
supervisor.runtime.autoreload = False

def main():
    try:
        print("=== WICDPICO SCD41 + LED CARD TEST ===")
        from foundation_core import WicdpicoFoundation
        foundation = WicdpicoFoundation()

        if foundation.initialize_network():
            from module_scd41 import SCD41Module
            scd41 = SCD41Module(foundation)
            foundation.register_module("scd41", scd41)

            from module_led_control import LEDControlModule
            led = LEDControlModule(foundation)
            foundation.register_module("led", led)

            from adafruit_httpserver import Response

            # Minimal CSS for centering and blue buttons
            css = """
            <style>
                .center-btns {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 1em;
                }
                button {
                    background: #007bff;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    padding: 0.75em 2em;
                    cursor: pointer;
                    font-size: 1em;
                    margin: 0.5em 0;
                }
                button:active, button:focus {
                    outline: none;
                }
                .module {
                    border: 1px solid #ccc;
                    border-radius: 8px;
                    padding: 1em;
                    margin-bottom: 1em;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
                    background: #fff;
                }
            </style>
            """

            @foundation.server.route("/", methods=['GET'])
            def serve_dashboard(request):
                try:
                    # Get SCD41 readings from attributes
                    co2 = getattr(scd41, "last_co2", "---")
                    temp = getattr(scd41, "last_temperature", "---")
                    humidity = getattr(scd41, "last_humidity", "---")
                    status = "OK" if co2 != "---" else getattr(scd41, "last_error", "Unavailable")

                    scd41_card = f"""
                    <div class="module">
                        <h3>SCD41 Sensor</h3>
                        <p><strong>CO₂:</strong> {co2} ppm</p>
                        <p><strong>Temperature:</strong> {temp} °C</p>
                        <p><strong>Humidity:</strong> {humidity} %</p>
                        <p><strong>Status:</strong> {status}</p>
                        <div class="center-btns">
                            <button onclick="window.location.reload()">Refresh Reading</button>
                            <button onclick="window.location.href='/scd41-details'">SCD41 Details</button>
                        </div>
                    </div>
                    """

                    # Use the actual LED card from the module, wrapped for vertical stacking
                    led_card = f"""
                    <div class="module">
                        <h3>LED Control</h3>
                        <div class="center-btns">
                            {led.get_dashboard_html()}
                        </div>
                    </div>
                    """

                    dashboard_html = f"""
                    <html>
                    <head>
                        <title>WicdPico Dashboard</title>
                        <meta name="viewport" content="width=device-width, initial-scale=1">
                        {css}
                    </head>
                    <body>
                        {scd41_card}
                        {led_card}
                    </body>
                    </html>
                    """
                    return Response(request, dashboard_html, content_type="text/html")
                except Exception as e:
                    print(f"Dashboard error: {e}")
                    return Response(request, f"<h1>Dashboard Error</h1><p>{e}</p>", content_type="text/html")

            @foundation.server.route("/scd41-details", methods=['GET'])
            def serve_scd41_details(request):
                try:
                    # Get the full SCD41 controls and details card from the module
                    details_card = scd41.get_dashboard_html()
                    # Add a centered Return button below all controls
                    details_html = f"""
                    {details_card}
                    <div class="center-btns" style="margin-top:2em;">
                        <button onclick="window.location.href='/'">Return</button>
                    </div>
                    """
                    details_page = f"""
                    <html>
                    <head>
                        <title>SCD41 Details</title>
                        <meta name="viewport" content="width=device-width, initial-scale=1">
                        {css}
                    </head>
                    <body>
                        {details_html}
                    </body>
                    </html>
                    """
                    return Response(request, details_page, content_type="text/html")
                except Exception as e:
                    print(f"SCD41 details error: {e}")
                    return Response(request, f"<h1>SCD41 Details Error</h1><p>{e}</p>", content_type="text/html")

            foundation.start_server()
            print("✓ SCD41 + LED dashboard ready. Access via browser.")

            while True:
                foundation.server.poll()
                for module in foundation.modules.values():
                    module.update()
                time.sleep(0.1)
                gc.collect()
    except KeyboardInterrupt:
        print("Stopping...")
    except Exception as e:
        print(f"✗ Error: {e}")

if __name__ == "__main__":
    main()